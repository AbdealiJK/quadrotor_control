<?xml version="1.0"?>

<robot name="quadrotor" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Taken fromthe Xacro file : <xacro:include filename="$(find hector_quadrotor_description)/urdf/quadrotor.urdf.xacro" /> -->
  <xacro:property name="pi" value="3.1415926535897931" />
  <xacro:arg name="use_payload" default="false" />

  <!-- value for chain's mass -->
  <xacro:property name="payload_mass" value="0.1" />
  <!-- Cube dimensions (side x side x side) of payload -->
  <xacro:property name="payload_side" value="0.2" />

  <!-- value for chain's mass -->
  <xacro:property name="chain_mass" value="0.001" />
  <!-- Square dimensions (width x width) of links in the chain -->
  <xacro:property name="chain_width" value="0.02" />
  <xacro:property name="chain_height" value="0.3" />
  <xacro:property name="chain_angle_limit" value="0.1" />
  <!-- Space btw top of beam and the each joint -->
  <!-- <xacro:property name="chain_axel_offset" value="0.05" /> -->

  <!-- Sonar sensor include -->
  <!-- <xacro:include filename="$(find hector_sensors_description)/urdf/sonar_sensor.urdf.xacro" /> -->

  <!-- Main quadrotor link -->
  <link name="base_link">
    <inertial>
      <mass value="1.477" />
      <origin xyz="0 0 0" rpy="0 0 0" />
      <inertia ixx="0.01152" ixy="0.0" ixz="0.0" iyy="0.01152" iyz="0.0" izz="0.0218" />
    </inertial>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://hector_quadrotor_description/meshes/quadrotor/quadrotor_base.dae"/>
      </geometry>
    </visual>

    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="package://hector_quadrotor_description/meshes/quadrotor/quadrotor_base.stl"/>
      </geometry>
    </collision>
  </link>

  <xacro:if value="$(arg use_payload)">
    <joint name="joint1" type="revolute">
      <parent link="base_link"/>
      <child link="link1"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
      <limit upper="${chain_angle_limit}" lower="${-chain_angle_limit}"
             velocity="10" effort="1"/>
    </joint>

    <link name="link1">
      <collision>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${chain_width} ${chain_width} ${chain_height}"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${chain_width} ${chain_width} ${chain_height}"/>
        </geometry>
        <material name="yellow">
          <color rgba="1 1 0 1"/>
        </material>
      </visual>

      <inertial>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <mass value="${chain_mass}"/>
        <inertia
          ixx="${chain_mass / 12.0 * (chain_width*chain_width + chain_height*chain_height)}" ixy="0.0" ixz="0.0"
          iyy="${chain_mass / 12.0 * (chain_height*chain_height + chain_width*chain_width)}" iyz="0.0"
          izz="${chain_mass / 12.0 * (chain_width*chain_width + chain_width*chain_width)}"/>
      </inertial>
    </link>

    <joint name="joint2" type="revolute">
      <parent link="link1"/>
      <child link="link2"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
      <limit upper="${chain_angle_limit}" lower="${-chain_angle_limit}"
             velocity="10" effort="1"/>
    </joint>

    <link name="link2">
      <collision>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${chain_width} ${chain_width} ${chain_height}"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${chain_width} ${chain_width} ${chain_height}"/>
        </geometry>
        <material name="yellow">
          <color rgba="1 1 0 1"/>
        </material>
      </visual>

      <inertial>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <mass value="${chain_mass}"/>
        <inertia
          ixx="${chain_mass / 12.0 * (chain_width*chain_width + chain_height*chain_height)}" ixy="0.0" ixz="0.0"
          iyy="${chain_mass / 12.0 * (chain_height*chain_height + chain_width*chain_width)}" iyz="0.0"
          izz="${chain_mass / 12.0 * (chain_width*chain_width + chain_width*chain_width)}"/>
      </inertial>
    </link>
<!--
    <joint name="joint3" type="revolute">
      <parent link="link2"/>
      <child link="link3"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
      <limit upper="${chain_angle_limit}" lower="${-chain_angle_limit}"
             velocity="10" effort="1"/>
    </joint>

    <link name="link3">
      <collision>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${chain_width} ${chain_width} ${chain_height}"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${chain_width} ${chain_width} ${chain_height}"/>
        </geometry>
        <material name="yellow">
          <color rgba="1 1 0 1"/>
        </material>
      </visual>

      <inertial>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <mass value="${chain_mass}"/>
        <inertia
          ixx="${chain_mass / 12.0 * (chain_width*chain_width + chain_height*chain_height)}" ixy="0.0" ixz="0.0"
          iyy="${chain_mass / 12.0 * (chain_height*chain_height + chain_width*chain_width)}" iyz="0.0"
          izz="${chain_mass / 12.0 * (chain_width*chain_width + chain_width*chain_width)}"/>
      </inertial>
    </link>

    <joint name="joint4" type="revolute">
      <parent link="link3"/>
      <child link="link4"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
      <limit upper="${chain_angle_limit}" lower="${-chain_angle_limit}"
             velocity="10" effort="1"/>
    </joint>

    <link name="link4">
      <collision>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${chain_width} ${chain_width} ${chain_height}"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <geometry>
          <box size="${chain_width} ${chain_width} ${chain_height}"/>
        </geometry>
        <material name="yellow">
          <color rgba="1 1 0 1"/>
        </material>
      </visual>

      <inertial>
        <origin xyz="0 0 ${-chain_height/2}" rpy="0 0 0"/>
        <mass value="${chain_mass}"/>
        <inertia
          ixx="${chain_mass / 12.0 * (chain_width*chain_width + chain_height*chain_height)}" ixy="0.0" ixz="0.0"
          iyy="${chain_mass / 12.0 * (chain_height*chain_height + chain_width*chain_width)}" iyz="0.0"
          izz="${chain_mass / 12.0 * (chain_width*chain_width + chain_width*chain_width)}"/>
      </inertial>
    </link>
 -->
    <joint name="joint_payload" type="revolute">
      <origin xyz="0 0 ${-chain_height}" rpy="0 0 0"/>
      <axis xyz="0 1 0"/>
      <parent link="link2"/>
      <child link="payload"/>
      <limit upper="0.1" lower="-0.1" velocity="10" effort="1"/>
    </joint>

    <link name="payload">
      <visual>
        <geometry>
          <box size="${payload_side} ${payload_side} ${payload_side}"/>
        </geometry>
        <material name="green">
          <color rgba="0 0.3 0 1"/>
        </material>
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </visual>

      <inertial>
        <mass value="${payload_mass}" />
        <inertia
          ixx="${payload_mass / 12.0 * (payload_side*payload_side + payload_side*payload_side)}" ixy="0.0" ixz="0.0"
          iyy="${payload_mass / 12.0 * (payload_side*payload_side + payload_side*payload_side)}" iyz="0.0"
          izz="${payload_mass / 12.0 * (payload_side*payload_side + payload_side*payload_side)}"/>
        <origin rpy="0 0 0" xyz="0 0 0"/>
      </inertial>

      <collision>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <box size="${payload_side} ${payload_side} ${payload_side}"/>
        </geometry>
      </collision>
    </link>
  </xacro:if>
  <!-- Sonar height sensor -->
  <!-- <xacro:sonar_sensor name="sonar" parent="base_link" ros_topic="sonar_height" update_rate="10" min_range="0.03" max_range="3.0" field_of_view="${40*pi/180}" ray_count="3">
    <origin xyz="-0.16 0.0 -0.012" rpy="0 ${90*pi/180} 0"/>
  </xacro:sonar_sensor> -->

  <!-- Taken from the Xacro file : <xacro:include filename="$(find hector_quadrotor_gazebo)/urdf/quadrotor_plugins.gazebo.xacro" /> -->
  <arg name="world_frame" default="world"/> <!-- This should actually be "/world". See https://github.com/ros-simulation/gazebo_ros_pkgs/pull/324 -->
  <arg name="base_link_frame" default="base_link"/>

  <!-- Quadrotor Gazebo Plugins -->
  <xacro:include filename="$(find hector_quadrotor_gazebo)/urdf/quadrotor_sensors.gazebo.xacro" />
  <xacro:include filename="$(find hector_quadrotor_gazebo)/urdf/quadrotor_controller.gazebo.xacro" />
  <xacro:include filename="$(find hector_quadrotor_gazebo)/urdf/quadrotor_propulsion.gazebo.xacro" />
  <xacro:include filename="$(find hector_quadrotor_gazebo)/urdf/quadrotor_aerodynamics.gazebo.xacro" />

  <xacro:quadrotor_sensors />
  <xacro:quadrotor_controller />
  <xacro:quadrotor_propulsion />
  <xacro:quadrotor_aerodynamics />
</robot>
